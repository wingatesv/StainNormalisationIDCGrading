# -*- coding: utf-8 -*-
"""Find average Colour of Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JtRdTHZeTIDL4rIEuYpL9xFYrpqB0rah
"""

# connect to google frive
from google.colab import drive
drive.mount('/content/drive')

# import libraries
import os
from PIL import Image
import numpy as np
from scipy import spatial

# get all path from dataset directory
from fastai import *
from fastai.vision import *
base_path = '/content/drive/MyDrive/Wingates FYP/Dataset/Extra Dataset'
path = Path(base_path)
file_path=get_files(path, recurse=True)
print(len(file_path)) # To validate equal total number of images

# Generate the most average image
size = (500, 500)
N = 888


arr = numpy.zeros((500,500,3),numpy.float64)

for path in file_path:
  im = PIL.Image.open(path)
  im = im.resize(size)
  imarr=numpy.array(im, dtype=numpy.float64)
  arr=arr+imarr/N


# Round values in array and cast as 8-bit integer
arr=numpy.array(numpy.round(arr),dtype=numpy.uint8)

# Generate, save and preview final image
out=PIL.Image.fromarray(arr,mode="RGB")
out.save("Average.png")
out.show()

# Find the most similar image from the dataset based on the average image
size = (500, 500)
average_image = Image.open('Average.png')

result_path = ''
value = 0

for path in file_path:

  target_image = PIL.Image.open(path)
  target_image = target_image.resize(size)

  
  # convert the images to (R,G,B) arrays

  im_array1 = np.array(average_image)
  im_array2 = np.array(target_image)

  # flatten the arrays so they are 1 dimensional vectors

  im_array1 = im_array1.flatten()
  im_array2 = im_array2.flatten()

  # divide the arrays by 255, the maximum RGB value to make sure every value is on a 0-1 scale

  im_array1 = im_array1/255
  im_array2 = im_array2/255

  similarity = -1 * (spatial.distance.cosine(im_array1, im_array2) - 1)
  print(similarity)

  if value == 0:
    value = similarity
    result_path = str(path)
    print(f'value is {value}')
    print(f'path is {result_path}')
  
  elif value != 0 and value < similarity:
    value = similarity
    result_path = str(path)
    print('Found a bigger similarity')
    print(f'value is {value}')
    print(f'path is {result_path}')

result_path